import esbuild from "esbuild";
import builtins from "builtin-modules";

import { config } from "dotenv";
import { join } from "path";
import { copyFileSync, writeFileSync } from "fs";

config();

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const dir = prod ? "./dist" : "./";
const outfile = join(dir, "main.js");
const isWatching = process.argv.includes('--watch');

if (prod) {
  copyFileSync("./main.js", join(dir, "main.js"));
  copyFileSync("./manifest.json", join(dir, "manifest.json"));
}
else {
  copyFileSync("./manifest.json", join(dir, "manifest.json"));
  writeFileSync(
    join(dir, ".hotreload"),
    "This file is used to enable hot reloading using the Hot Reload plugin. See https://github.com/pjeby/hot-reload for more information."
  );
}

async function buildAndWatch() {
  try {
    const ctx = await esbuild.context({
      banner: {
        js: banner,
      },
      entryPoints: ["src/main.ts"],
      bundle: true,
      external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins,
      ],
      format: "cjs",
      target: "es2018",
      logLevel: "info",
      sourcemap: prod ? false : "inline",
      treeShaking: true,
      outfile: outfile,
    });

    console.log('First build successful.');

    if (isWatching) {
      console.log('Watching for changes...');
      await ctx.watch(); // Attiva il watch per monitorare le modifiche
    } else {
      await ctx.dispose(); // Rilascia risorse se non in modalit√† watch
    }
  } catch (error) {
    console.error('Error during build:', error);
    process.exit(1);
  }
}

buildAndWatch();
